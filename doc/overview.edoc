@author Ulf Wiger <ulf.wiger@feuerlabs.com> 
@author Magnus Feuer <magnus.feuer@feuerlabs.com> 
@copyright 2013 Feurelabs, Inc. All rights reserved.
@version {@version}
@title Exometer - Erlang instrumentation package

@doc 
The Exometer package allows for easy and efficient instrumentation of
Erlang code, allowing crucial data on system performance to be
exported to a wide variety of monitoring systems.

Exometer comes with a set of pre-defined monitor components, and can
be expanded with custom components to handle new types of Metrics, as
well as integration with additional external systems such as
databases, laod balancers, etc.

== Concepts and Definitions ==

Exometer introcuces a number of concepts and definitions used
throughout the documentation and the code.

=== Metric === 

A metric is a specific measurement sampled inside an Erlang system and
then reported to the Exometer system. An example  metric would be
"transactions_per_second", or "memory_usage".

Metrics are identified by a list of atoms, such as given below:

``[ xml_front_end, parser, file_size ]''

A metric is created through a call by the code to be instrumented to
``exometer_entry:new()''. Once created. Once created, the metric can
be updated through ``exometer_entry:update()'', or on its own
initiative through the ``exometer_probe:sample'' behavior
implementation.

=== Data point ===

Each metric can consist of multiple data points, where each point has
a specific value. 

A typical example of data points would be a
``transactions_per_second'' (tps) metric, usually stored as a
histogram overing the last couple of minutes of tps samples. Such a
histogram would host multiple values, such as ``min'', ``max'',
``median'', ``mean'', ``50_percentile'', ``75_percentile'',
etc.

It is up to the type of the metric, and the data probe backing that
type (see below), to specify which data points are available under the
given metric.


=== Metric Type ===

The type of a metric, specified when the metric is created through
``exometer_entry:new()'', determines which ``exometer_processor''
callback to use.

The link between the type and the processor to use is configured
through the ``exomter_admin'' module, and its associated exometer
defaults environment.

The metric type, in other words, is only used to map a metric to a
configurable processor.

=== Processors ===

A processor will receive values reported to a metric through the
``exometer_entry:update()'' call and compile it into one or more data
points. The processor can either be a counter (implemented natively
in ``exometer_entry''), or a more complex statistical analysis such
as a uniform distriburtion or a regular histogram. 

The various outputs from these processors are reported as data points
under the given metric.

A processor can also interface external analytics
packages. ``exometer_folsom'', for example, integrates with the
``folsom_metrics'' package found at
[https://github.com/boundary/folsom].

=== Probes ===

Probes are a further specialization of processors that run in their
own Erlang processes and have their own state (like a gen_server). A
probe is implemented through the ``exometer_probe'' behavior.

A probe is, among other things, used if independent monitoring is
needed of, for example, ``/proc'' trees, network interfaces, and
other sub systems that need periodic sampling. In these cases,
the ``exometer_probe:probe_sample'' call is invoked regularly by
exometer, as its own process, in order to extract data from
the given subsystem and add it to the metric's data points.

=== Subscriptions ===


== Built in processors ==

== Built in probes ==

== Instrumenting Erlang code ==

== Configuring Exometer ==


=== Exporting to collectd ===

=== Exporting to Hosted Graphite ===

=== Exporting to Stackdriver ===


